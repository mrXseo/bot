#–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –º–æ–¥—É–ª–µ–π
import logging
import time 
import gspread
from aiogram import Bot, Dispatcher, executor, types,exceptions

# –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å google —Ç–∞–±–ª–∏—Ü–∞–º–∏: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –∑–∞–ø–∏—Å–∏ 

gc = gspread.service_account(filename='project-for-cafe-sunrise-9b017f6c5ba6.json')
bd_orders = gc.open("experemental01")
first_free_string = 1

try:
    while  len ((bd_orders.sheet1.get('A' + str(first_free_string)))[0][0])  > 0:
        first_free_string +=1
except:
    ...

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ 

API_TOKEN = '6172045840:AAF61QxxP7-1WsX99HpwL2DrbxPDWkBhApE'
logging.basicConfig(level=logging.INFO) 
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
outchat_id = -848730589

# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤

class Product():

    def __init__(self, name = '', price_tag = 0, size = '', supplements  = [], way = str):
        self.name = name
        self.price_tag = price_tag
        self.size = size
        self.supplements = supplements
        self.way = way

    def clean(self):
        if self.name in drinks_there_must_add_supplements: 
            self.supplements = [self.supplements[0]]
        else:
            self.supplements = []

    def get_price(self):
        price = 0 + self.price_tag
        for sup in self.supplements:
            price += sup.price_tag
        return price

class Order:
    def __init__(self, user):
        self.user = user
        self.product_list = []
        self.status = 'open'
        text = time.ctime(time.time())[4:].split(' ')
        self.last_action = time.time()
        morth = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
        text[0] = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'][morth.index(text[0])]
        print(text)
        self.number = text[-1] + ':' + text[0] + ':' + [text[2], '0'+text[2]][len(text[2]) == 1] + ':' +text[3]
        self.delivery_trigger = False
        self.comment_trigger = False
        self.comment = ''

    def set_comment(self, comment):
        self.comment = comment

    def add(self, way):
        directory = open_directory(menu[0], way[:-2], 'üóí–ú–µ–Ω—é')
        for item in directory[0]:
            if item.split('&')[0] == way[-2]:
                    directory[1] = item.split('&')[-1]
                    directory[0] = directory[0][item][int(way[-1])]
        self.product_list.append(Product(name=directory[1], price_tag=directory[0][1], size= directory[0][0], supplements= [], way = way[2]))

    def out(self):
        order_text = '–ó–∞–∫–∞–∑ ‚Ññ' + self.number +'\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @' + str(self.user) +'\n–ê–¥—Ä–µ—Å ' + self.address + ' :'
        for p in self.product_list:
            supplements_text = ''
            for s in p.supplements:
                supplements_text += s.name  + ' '
            order_text += '\n - ' + p.name + ' ' + p.size + [' c ',''][len(p.supplements) == 0] + supplements_text 
        if len(self.comment) == 0:
            return order_text +'\n–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ' + self.close_time[11:19]
        else:
            return order_text +'\n–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ' + self.close_time[11:19] + '\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:\n -"' + self.comment + '"'
        
    def refresh(self):
        self.last_action = time.time()

    def get_price(self):
        return sum(map(lambda product: product.get_price(), self.product_list))

    def close(self):
        self.status = 'in queue'
        self.product_list = tuple(self.product_list)
        self.close_time = time.ctime(time.time())

    def set_address(self, address):
        self.address = address
    
    def arhivate(self):
        global first_free_string
        bd_orders.sheet1.update_cell(first_free_string, 1, self.number)
        bd_orders.sheet1.update_cell(first_free_string, 2, '=–î–ê–¢–ê(' + self.number.split(':')[0] + ';' + self.number.split(':')[1] + ';' + self.number.split(':')[2] + ')' )
        products_in_order = ''
        for p in self.product_list:
            supplements_text = ''
            for s in p.supplements:
                supplements_text += s.name + '; '
            products_in_order += p.name + ' ' + p.size + [' c ',''][len(p.supplements) == 0] + supplements_text
        bd_orders.sheet1.update_cell(first_free_string, 3, products_in_order)
        bd_orders.sheet1.update_cell(first_free_string, 4, self.get_price())  
        first_free_string += 1
        ... #—Å–∫—Ä–∏–ø—Ç –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –≤ –µ–∫—Å–µ–ª—å —Ç–∞–±–ª–∏—Ü–µ


# —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–µ—Ä–µ–≤–æ –º–µ–Ω—é, —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–æ–∫ –∫ –Ω–∞–ø–∏—Ç–∫–∞–º, —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º –∏ —Å–ø–∏—Å–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º
pay_contacts = ' –ø–æ –Ω–æ–º–µ—Ä—É: 8-916-533-65-58 \n'

menu = ({
        '0&–µ–¥–∞':{
                '0&–ü–∏—Ü—Ü—ã':{
                            '0&–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞':[['25—Å–º', 260],['40—Å–º', 430],['1/6 –æ—Ç 40—Å–º', 70]],
                            '1&–ü–µ–ø–µ—Ä–æ–Ω–∏':[['25—Å–º', 290],['40—Å–º', 490],['1/6 –æ—Ç 40—Å–º', 80]],
                            '2&–ö—É—Ä–∏–Ω–∞—è':[['25—Å–º', 290],['40—Å–º', 490],['1/6 –æ—Ç 40—Å–º', 80]],
                            '3&4 —Å—ã—Ä–∞':[['25—Å–º', 290],['40—Å–º', 490],['1/6 –æ—Ç 40—Å–º', 80]],
                            '4&–°–∞–ª—è–º–∏':[['25—Å–º', 290],['40—Å–º', 490],['1/6 –æ—Ç 40—Å–º', 80]],
                            '5&–ì—Ä–∏–±—ã –≤–µ—Ç—á–∏–Ω–∞':[['25—Å–º', 290],['40—Å–º', 490],['1/6 –æ—Ç 40—Å–º', 80]],
                            '6&–¶–µ–∑–∞—Ä—å':[['25—Å–º', 290],['40—Å–º', 490],['1/6 –æ—Ç 40—Å–º', 80]],
                            '7&–ñ—É–ª—å–µ–Ω':[['25—Å–º', 290],['40—Å–º', 490],['1/6 –æ—Ç 40—Å–º', 80]]
                            },
                '1&–¢–æ—Ä—Ç—ã':{
                            '0&–ß–∏–∑–∫–µ–π–∫':[['', 150]],
                            '1&–¢–æ—Ä—Ç —à–æ–∫–æ–ª–∞–¥–Ω—ã–π':[['', 150]]
                            },
                '2&–°—ç–Ω–¥–≤–∏—á–∏':{
                            '0&–°–µ–Ω–¥–≤–∏—á —Å –≤–µ—Ç—á–∏–Ω–æ–π –∏ —Å—ã—Ä–æ–º':[['', 130]],
                            '1&–°–µ–Ω–¥–≤–∏—á —Å –∫—É—Ä–∏—Ü–µ–π':[['', 130]]
                            }
                },
        '1&–Ω–∞–ø–∏—Ç–∫–∏':{
                    '0&–õ–µ—Ç–Ω–∏–µ':{
                                '0&Ice –ª–∞—Ç—Ç–µ':[['0,4–ª', 190]],
                                '1&–ë–∞–º–±–ª':[['0,4–ª', 190]],
                                '2&–≠—Å–ø—Ä–µ—Å—Å–æ-—Ç–æ–Ω–∏–∫':[['0,4–ª', 190]],
                                '3&Ice –∞–º–µ—Ä–∏–∫–∞–Ω–æ':[['0,4–ª', 160]],
                                '4&Ice –∫–∞–∫–∞–æ':[['0,4–ª', 160]],
                                '5&Ice —Ä–∞—Ñ':[['0,4–ª', 210]],
                                '6&–ú–æ—Ö–∏—Ç–æ':[['0,4–ª', 170]],
                                '7&–õ–∏–º–æ–Ω–∞–¥':[['0,4–ª', 130]],
                                '8&Ice tea':[['0,4–ª', 150]],
                                '9&–§—Ä–∞–ø–ø—É—á–∏–Ω–æ':[['0,4–ª', 230]]
                                },
                    '1&–ö–ª–∞—Å—Å–∏–∫–∞':{
                                '0&–≠—Å–ø—Ä–µ—Å—Å–æ':[['0,2–ª', 100]],
                                '1&–ê–º–µ—Ä–∏–∫–∞–Ω–æ':[['0,2–ª',100],['0,3–ª',130],['0,4–ª',150]],
                                '2&–ö–∞–ø—É—á–∏–Ω–æ':[['0,2–ª',120],['0,3–ª',150],['0,4–ª',170]],
                                '3&–õ–∞—Ç—Ç–µ':[['0,2–ª',120],['0,3–ª',150],['0,4–ª',170]],
                                '4&–†–∞—Ñ':[['0,2–ª',140],['0,3–ª',180],['0,4–ª',200]],
                                '5&–ú–æ–∫–∫–∞—á–∏–Ω–æ':[['0,2–ª',130],['0,3–ª',160],['0,4–ª',180]],
                                '6&–§–ª—ç—Ç —É–∞–π—Ç':[['0,2–ª',140]],
                                '7&–ö–∞–∫–∞–æ':[['0,2–ª',100],['0,3–ª',130],['0,4–ª',150]],
                                '8&–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥':[['0,2–ª',120],['0,3–ª',140],['0,4–ª',190]],
                                '9&–ß–∞–π –Ω–∞ –≤—ã–±–æ—Ä':{
                                                '0&–ß–µ—Ä–Ω—ã–π –ê—Å—Å–∞–º':[['0,2–ª',80],['0,3–ª',100],['0,4–ª',130]],
                                                '1&–ß—ë—Ä–Ω—ã—Ü –≠—Ä–ª –≥—Ä–µ–π':[['0,2–ª',80],['0,3–ª',100],['0,4–ª',130]],
                                                '2&–ó–µ–ª—ë–Ω–∞—è –°–µ–Ω—á–∞':[['0,2–ª',80],['0,3–ª',100],['0,4–ª',130]],
                                                '3&–ó–µ–ª—ë–Ω—ã–π –ñ–∞—Å–º–∏–Ω':[['0,2–ª',80],['0,3–ª',100],['0,4–ª',130]],
                                                '4&–§—Ä—É–∫—Ç–æ–≤—ã–π –ö–∞—Ä–∫–∞–¥–µ':[['0,2–ª',80],['0,3–ª',100],['0,4–ª',130]],
                                                '5&–¢—Ä–∞–≤—è–Ω–æ–π –ò–≤–∞–Ω-—á–∞–π':[['0,2–ª',80],['0,3–ª',100],['0,4–ª',130]]
                                                }
                                },
                    '2&–ê–≤—Ç–æ—Ä—Å–∫–∏–µ':{
                                '0&–†–∞—Ñ –Ω–∞—Ç':[['0,4–ª', 230]],
                                '1&–†–∞—Ñ —Ü–∏—Ç—Ä—É—Å':[['0,4–ª', 230]],
                                '2&–ü—Ä—è–Ω—ã–π —á–∞–π':[['0,2–ª',140],['0,3–ª',190],['0,4–ª',220]],
                                '3&–û–±–ª–µ–ø–∏—Ö–æ–≤—ã–π —á–∞–π':[['0,4–ª', 220]],
                                '4&–ò–º–±–∏—Ä–Ω—ã–π —á–∞–π':[['0,4–ª', 200]],
                                '5&–ì–ª–∏–Ω—Ç–≤–µ–π–Ω':[['0,4–ª', 210]],
                                '6&–ú–∞—Ç—á–∞ –ª–∞—Ç—Ç–µ':[['0,2–ª',130],['0,3–ª',180],['0,4–ª',210]],
                                '7&–ì–ª—è—Å–µ':[['0,4–ª', 190]]
                                    },
                    '3&–ú–æ–ª–æ—á–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏':{
                                            '0&–ö–ª—É–±–Ω–∏–∫–∞':[['0,4–ª', 230]],
                                            '1&–®–æ–∫–æ–ª–∞–¥':[['0,4–ª', 230]],
                                            '2&–í–∞–Ω–∏–ª—å':[['0,4–ª', 230]]
                                            },
                    '4&–°–º—É–∑–∏':{
                                '0&–û–≥—É—Ä–µ—Ü —Å–µ–ª—å–¥–µ—Ä–µ–π':[['0,4–ª', 200]],
                                '1&–ö–ª—É–±–Ω–∏–∫–∞':[['0,4–ª', 200]],
                                '2&–ë–∞–Ω–∞–Ω —à–æ–∫–æ–ª–∞–¥':[['0,4–ª', 220]],
                                '3&–ú—è—Ç–∞':[['0,4–ª', 200]]
                                },
                    '5&–§—Ä–µ—à':{
                            '0&–ê–ø–µ–ª—å—Å–∏–Ω':[['0,4–ª', 190]],
                            '1&–ì—Ä–µ–π–ø—Ñ—Ä—É—Ç':[['0,4–ª', 220]]
                            },
                    '6&–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫':{
                                    '0&–†–≠–î –ë—É–ª–ª':[['0,25–ª', 110],['0,5–ª', 210]],
                                    '1&–ê–¥—Ä–µ–Ω–∞–ª–∏–Ω':[['0,25–ª', 80],['0,5–ª', 100]],
                                    '2&–ö–æ–ª–∞':[['0,5–ª', 80],['1–ª', 150],['2–ª', 200]],
                                    '3&–§–∞–Ω—Ç–∞':[['0,5–ª', 80]],
                                    '4&–õ–∏–ø—Ç–æ–Ω':[['0,5–ª', 80]],
                                    '5&–í–æ–¥–∞':[['0,5–ª', 35]],
                                    '6&–ì–æ—Ä–∏–ª–ª–∞':[['0,5–ª', 100]],
                                    '7&–ú–æ–Ω—Å—Ç—Ä':[['0,5–ª', 100]]
                                    }    
                    }
        },)

users_online = {}

supplements = [Product('–∞–ª—å—Ç.–º–æ–ª–æ–∫–æ', 50, '0.2–ª'), Product('–∞–ª—å—Ç.–º–æ–ª–æ–∫–æ', 70, '0.3–ª'), Product('–∞–ª—å—Ç.–º–æ–ª–æ–∫–æ', 90, '0.4–ª')]

acceptable_drinks_for_supplements = ['Ice –ª–∞—Ç—Ç–µ','–ë–∞–º–±–ª','–≠—Å–ø—Ä–µ—Å—Å–æ-—Ç–æ–Ω–∏–∫','Ice –∞–º–µ—Ä–∏–∫–∞–Ω–æ','Ice –∫–∞–∫–∞–æ',
                                     'Ice —Ä–∞—Ñ','–ú–æ—Ö–∏—Ç–æ','–õ–∏–º–æ–Ω–∞–¥','Ice tea','–§—Ä–∞–ø–ø—É—á–∏–Ω–æ',
                                     '–≠—Å–ø—Ä–µ—Å—Å–æ','–ê–º–µ—Ä–∏–∫–∞–Ω–æ','–ö–∞–ø—É—á–∏–Ω–æ','–õ–∞—Ç—Ç–µ','–†–∞—Ñ',
                                     '–ú–æ–∫–∫–∞—á–∏–Ω–æ','–§–ª—ç—Ç —É–∞–π—Ç','–ö–∞–∫–∞–æ','–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥','–ß–µ—Ä–Ω—ã–π –ê—Å—Å–∞–º',
                                     '–ß—ë—Ä–Ω—ã—Ü –≠—Ä–ª –≥—Ä–µ–π','–ó–µ–ª—ë–Ω–∞—è –°–µ–Ω—á–∞','–ó–µ–ª—ë–Ω—ã–π –ñ–∞—Å–º–∏–Ω','–§—Ä—É–∫—Ç–æ–≤—ã–π –ö–∞—Ä–∫–∞–¥–µ','–¢—Ä–∞–≤—è–Ω–æ–π –ò–≤–∞–Ω-—á–∞–π',
                                     '–†–∞—Ñ –Ω–∞—Ç','–†–∞—Ñ —Ü–∏—Ç—Ä—É—Å','–ü—Ä—è–Ω—ã–π —á–∞–π','–û–±–ª–µ–ø–∏—Ö–æ–≤—ã–π —á–∞–π','–ò–º–±–∏—Ä–Ω—ã–π —á–∞–π',
                                     '–ì–ª–∏–Ω—Ç–≤–µ–π–Ω','–ú–∞—Ç—á–∞ –ª–∞—Ç—Ç–µ','–ì–ª—è—Å–µ']         #—Å–ø–∏—Å–æ–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤ –∫—É–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∫–∏

names_for_supplements = ['–ö–∞—Ä–∞–º–µ–ª—å','–°–æ–ª–µ–Ω–∞—è –∫–∞—Ä–∞–º–µ–ª—å','–®–æ–∫–æ–ª–∞–¥–Ω—ã–π',  #–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Ä–æ–ø–æ–≤
                         '–ú—è—Ç–∞','–ö–ª—É–±–Ω–∏–∫–∞','–ú–∞–ª–∏–Ω–∞',
                         '–ï–∂–µ–≤–∏–∫–∞','–ö–æ–∫–æ—Å','–§—É–Ω–¥—É–∫',
                         '–í–∞–Ω–∏–ª—å','–ú—ë–¥','–ö–ª—ë–Ω',
                         '–ê–π—Ä–∏—à']

drinks_there_must_add_supplements = ['Ice –ª–∞—Ç—Ç–µ', 'Ice —Ä–∞—Ñ', '–õ–∏–º–æ–Ω–∞–¥', 'Ice tea', '–†–∞—Ñ']

for i in names_for_supplements:                 #–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–æ–∫ –∫ –Ω–∞–ø–∏—Ç–∫–∞–º —Å–∏—Ä–æ–ø–∞–º–∏
    supplements.append(Product(i, 30, '', []))



# —Ñ—É–Ω–∫—Ü–∏–∏ 
        #–æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–æ—Ä—è –ø–æ id –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
def open_directory(directory, way, name=''):    #–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ª–∏—Å—Ç–∞ [—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ; –∫–ª—é—á]
    if len(way) < 1:                            #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø—É—Ç–∏
        return [directory, name]                #–≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
    for key in directory:                       #–ø–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ –µ–≥–æ id
        if way[0] == key.split('&')[0]:
            return open_directory(directory[key], way[1:], key.split('&')[-1])              #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    return [directory, name]                    #–≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–∞–ª—å—à–µ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏

        #—Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞
deadline = 3600
extra_deadline = 600
last_clear = time.time()

def trash_collector(dline):
    global last_clear
    if time.time() - last_clear > dline:
        black_list = []
        last_clear = time.time() 
        for order in users_online:
            if time.time() - users_online[order].last_action > dline and users_online[order] == 'open':
                black_list.append(order)
        outdated_list = []
        for outdated in black_list:
            outdated_list.append(outdated)
            del users_online[order]
        return outdated_list
    else: return []

#—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è

@dp.message_handler(commands=['start'])             #–ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞
async def send_welcome(message: types.Message):
    if message.chat.id != outchat_id:
        InlineKeyboard = types.InlineKeyboardMarkup()
        inlineKeyboard = types.InlineKeyboardMarkup()
        try:             
            users_online[message.from_user.id] = Order(message.from_user.id)          # –∫–æ—Ä–∑–∏–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        except MemoryError:
            trash_collector_memory = trash_collector(deadline)
            if len(trash_collector_memory) > 0:
                inlineKeyboard.add(types.InlineKeyboardButton(text= '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='start'))
                for order in trash_collector:
                    await bot.send_message(order, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å—Ç—ë—Ä—Ç—ã –∏–∑-–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.', reply_markup=inlineKeyboard)
        InlineKeyboard.add(types.InlineKeyboardButton(text='üóí –ú–µ–Ω—é üóí', callback_data='open$menu')) # -–∫–Ω–æ–ø–∫–∞ —Å –≤—ã–∑–æ–≤–æ–º –∫–æ—Ä–Ω–µ–≤–æ–π –≤–µ—Ä—à–∏–Ω—ã –¥–µ—Ä–µ–≤–∞-–º–µ–Ω—é
        await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –æ—Ç –∫–∞—Ñ–µ –†–∞—Å—Å–≤–µ—Ç!\n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º... ", reply_markup=InlineKeyboard)

#–æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫

@dp.callback_query_handler(lambda call:True)            #–ø–µ—Ä–µ—Ö–≤–∞—Ç –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–æ–∫
async def start_hub_menu(call: types.CallbackQuery):    
    inlineKeyboard = types.InlineKeyboardMarkup()
    orderInlineKeyboard = types.InlineKeyboardMarkup()
    trash_collector_memory = trash_collector(deadline)
    if len(trash_collector_memory) > 0:
        inlineKeyboard.add(types.InlineKeyboardButton(text= '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='open$menu'))
        for order in trash_collector:
            await bot.send_message(order, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å—Ç—ë—Ä—Ç—ã –∏–∑-–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.', reply_markup=inlineKeyboard)
    commandList = call.data.split('$') 

    try:
        if commandList[0] != 'start':
            users_online[call.from_user.id].comment_trigger = False
            users_online[call.from_user.id].delivery_trigger = False
        if commandList[0] == 'order':
            if commandList[2] == 'cook':
                if commandList[3] == 'start' and users_online[int(commandList[1])].status == 'in queue':
                    orderInlineKeyboard.add(types.InlineKeyboardButton('–ì–æ—Ç–æ–≤', callback_data='order$'+commandList[1] +'$cook$ready'))
                    users_online[int(commandList[1])].status = 'cooking'
                    await bot.send_message(int(commandList[1]), '–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å.' )
                    await bot.send_message(outchat_id, users_online[int(commandList[1])].out(), reply_markup=orderInlineKeyboard)

                elif commandList[3] == 'ready' and users_online[int(commandList[1])].status == 'cooking':
                    if users_online[int(commandList[1])].address in ['"–í –∑–∞–ª–µ"', '"–° —Å–æ–±–æ–π"']:
                        orderInlineKeyboard.add(types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å', callback_data='order$'+commandList[1] +'$cook$end'))
                        users_online[int(commandList[1])].status = 'ready'
                        await bot.send_message(int(commandList[1]), '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤. –ú–æ–∂–µ—Ç–µ –ø–æ–¥–æ–π—Ç–∏ –∏ –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ.' )
                        await bot.send_message(outchat_id, users_online[int(commandList[1])].out(), reply_markup=orderInlineKeyboard)  
                    else:
                        orderInlineKeyboard.add(types.InlineKeyboardButton('–î–æ—Å—Ç–∞–≤–∏—Ç—å', callback_data='order$'+commandList[1] +'$cook$dlvr'))
                        users_online[int(commandList[1])].status = 'deliver'
                        await bot.send_message(int(commandList[1]), '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤. –ü–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è –∫—É—Ä—å–µ—Ä –≤–æ–∑—å–º—ë—Ç –µ–≥–æ.' )
                        await bot.send_message(outchat_id, users_online[int(commandList[1])].out(), reply_markup=orderInlineKeyboard)

                elif commandList[3] == 'dlvr' and users_online[int(commandList[1])].status == 'deliver':
                    orderInlineKeyboard.add(types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å', callback_data='order$'+commandList[1] +'$cook$dend'))
                    users_online[int(commandList[1])].status = 'dready'
                    await bot.send_message(int(commandList[1]), '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∏ —É–∂–µ –≤ –ø—É—Ç–∏.' )
                    await bot.send_message(outchat_id, users_online[int(commandList[1])].out(), reply_markup=orderInlineKeyboard)
                    
                elif commandList[3] == 'end' and users_online[int(commandList[1])].status == 'ready':
                    users_online[int(commandList[1])].status = 'close'
                    users_online[int(commandList[1])].arhivate()
                    del users_online[int(commandList[1])]
                    inlineKeyboard.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data='start'))
                    await bot.send_message(int(commandList[1]), '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –∫–∞—Ñ–µ. –î–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â—ë. –ñ–¥—ë–º –≤–∞—Å.', reply_markup=inlineKeyboard)
                    await bot.send_message(outchat_id, '–ó–∞–∫–∞–∑ –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ –∞—Ä—Ö–∏–≤.', reply_markup=orderInlineKeyboard)

                elif commandList[3] == 'dend' and users_online[int(commandList[1])].status == 'dready':
                    users_online[int(commandList[1])].status = 'close'
                    users_online[int(commandList[1])].arhivate()
                    del users_online[int(commandList[1])]
                    inlineKeyboard.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data='start'))
                    await bot.send_message(int(commandList[1]), '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –∫–∞—Ñ–µ. –î–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â—ë. –ñ–¥—ë–º –≤–∞—Å.', reply_markup=inlineKeyboard)
                    await bot.send_message(outchat_id, '–ó–∞–∫–∞–∑ –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ –∞—Ä—Ö–∏–≤.', reply_markup=orderInlineKeyboard)

            elif commandList[2] == 'waiver':
                if commandList[3] == 'write':
                    orderInlineKeyboard.add(types.InlineKeyboardButton('–ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å', callback_data='order$'+commandList[1] +'$waiver$pnf'))
                    orderInlineKeyboard.add(types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='order$'+commandList[1] +'$waiver$remove'))
                    users_online[int(commandList[1])].status = 'rejection'
                    await bot.send_message(outchat_id, '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –æ—Ç –∑–∞–∫–∞–∑–∞ ‚Ññ'+ users_online[int(commandList[1])].number +':', reply_markup=orderInlineKeyboard)

                elif commandList[3] == 'pnf' and users_online[int(commandList[1])].status == 'rejection':
                    del users_online[int(commandList[1])]
                    await bot.send_message(int(commandList[1]), '–ü–æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω, –ø—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è.')   

                elif commandList[3] == 'remove' and users_online[int(commandList[1])].status == 'rejection':
                    users_online[int(commandList[1])].status = 'in queue'
                    await bot.send_message(outchat_id, users_online[call.from_user.id].out(), reply_markup=orderInlineKeyboard)       

        elif commandList[0] == 'open' and call.message.chat.id != outchat_id:
            if commandList[1] == 'menu':
                directory = open_directory(menu[0], commandList[2:], 'üóí –ú–µ–Ω—é üóí')
                for obj in directory[0]:
                    if type(directory[0][obj]) == list:
                        inlineKeyboard.add( types.InlineKeyboardButton(text= obj.split('&')[-1] , callback_data= 'open$objmenu$'+'$'.join(commandList[2:])+'$'+obj.split('&')[0]))
                    else:
                        inlineKeyboard.add( types.InlineKeyboardButton(text= obj.split('&')[-1] , callback_data= '$'.join(commandList)+'$'+obj.split('&')[0]))

                await call.message.answer(directory[1]+":", reply_markup=inlineKeyboard)

            elif commandList[1] == 'objmenu':
                directory = open_directory(menu[0], commandList[2:-1], 'üóí –ú–µ–Ω—é üóí')
                for item in directory[0]:
                    if item.split('&')[0] == commandList[-1]:
                        directory[1] = item.split('&')[-1]
                        directory[0] = directory[0][item]
                message_text = ''
                way_to_add = 'cart$add$'
                if directory[1] in drinks_there_must_add_supplements:
                    way_to_add = 'sup$nec$'
                if len(directory[0]) == 1:
                    message_text = directory[1] + ' ' + directory[0][0][0] + ' –∑–∞ ' + str(directory[0][0][1]) + '‚ÇΩ'
                    inlineKeyboard.add(types.InlineKeyboardButton(text = '–î–æ–±–∞–≤–∏—Ç—å ', callback_data= 'open$' + way_to_add +'$'.join(commandList[2:]) +'$0'))
                else:
                    message_text = '–î–æ–±–∞–≤–∏—Ç—å' + directory[1] + ':'
                    instance_number = 0
                    for instance in directory[0]:
                        inlineKeyboard.add(types.InlineKeyboardButton(text = directory[0][instance_number][0] + ' –∑–∞ ' + str(directory[0][instance_number][1])+ '‚ÇΩ',
                                                                       callback_data= 'open$' + way_to_add +'$'.join(commandList[2:])+'$' + str(instance_number)))
                        instance_number += 1

                await call.message.answer(message_text, reply_markup=inlineKeyboard)
            
            elif commandList[1] == 'sup':
                if commandList[2] == 'nec':
                    for sup in range(3, len(supplements)):
                        inlineKeyboard.add(types.InlineKeyboardButton( text = supplements[sup].name + ' | +' + str(supplements[sup].price_tag - 30) + '‚ÇΩ',
                                                                       callback_data= 'open$cart$add$' + '$'.join(commandList[3:]) + '$sup$' + str(sup)))
                    await call.message.answer("–ö –¥–∞–Ω–Ω–æ–º—É –Ω–∞–ø–∏—Ç–∫—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–¥—ë—Ç —Å–∏—Ä–æ–ø, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–µ–Ω –≤ —Ü–µ–Ω—É:", reply_markup=inlineKeyboard)
                                                        #—ç—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ –≤–∫–ª—é—á–∏–ª –∫ $red or $add or... –∏–∑-–∑–∞ –º–∞—Å—à—Ç–∞–±–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ—ë
                elif commandList[3] == 'addmenu':        #commandList[0] = open; commandList[1] = sup; commandList[2] = product number in order.product_list  ; commandList[3] = command 
                    if users_online[call.from_user.id].product_list[int(commandList[2])].size == '0,2–ª':
                        inlineKeyboard.add( types.InlineKeyboardButton(text=supplements[0].name + '| +' + str(supplements[0].price_tag) +'‚ÇΩ', callback_data = 'open$sup$' + commandList[2] + '$add$0'))
                    elif users_online[call.from_user.id].product_list[int(commandList[2])].size == '0,3–ª':
                        inlineKeyboard.add( types.InlineKeyboardButton(text=supplements[1].name + '| +' + str(supplements[1].price_tag) +'‚ÇΩ', callback_data = 'open$sup$' + commandList[2] + '$add$1'))
                    elif users_online[call.from_user.id].product_list[int(commandList[2])].size == '0,4–ª':
                        inlineKeyboard.add( types.InlineKeyboardButton(text=supplements[2].name + '| +' + str(supplements[2].price_tag) +'‚ÇΩ', callback_data = 'open$sup$' + commandList[2] + '$add$2'))
                    for supplement_number in range(3, len(supplements)):
                        inlineKeyboard.add( types.InlineKeyboardButton(text=supplements[supplement_number].name + '| +' + str(supplements[supplement_number].price_tag) +'‚ÇΩ',
                                                                        callback_data = 'open$sup$' + commandList[2] + '$add$' + str(supplement_number)))
                    inlineKeyboard.add( types.InlineKeyboardButton(text='üõí –≤–µ—Ä–Ω—É—Ç—å—Å—è üõí', callback_data = 'open$cart$red$' + commandList[2]))
                    inlineKeyboard.add( types.InlineKeyboardButton(text='üóí –º–µ–Ω—é üóí', callback_data = 'open$menu'))
                    await call.message.answer("–°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ–±–∞–≤–æ–∫ –∫ –Ω–∞–ø–∏—Ç–∫—É:", reply_markup=inlineKeyboard)

                elif commandList[2] == 'removeexc':
                    await  call.message.answer("–≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–æ–±–∞–≤–∫–∞, –µ—ë –Ω–µ–ª—å–∑—è —É–±—Ä–∞—Ç—å.")

                elif commandList[3] in ['red','add','remove']:     #commandList[0] = open; commandList[1] = sup; commandList[2] = product number in order.product_list  ; commandList[3] = command ; commandList[4] = supplement number in supplements 
                                                                       #–≤–∫–ª—é—á–∏–ª —Å—é–¥–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ—Ö–æ–∂–∏–º –∫–∞—Ä–∫–∞—Å–æ–º commandList, –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏, –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –æ–∫–æ–Ω
                    if commandList[3] == 'add':
                        users_online[call.from_user.id].product_list[int(commandList[2])].supplements.append(supplements[int(commandList[4])])
                    elif commandList[3] == 'remove':
                        del users_online[call.from_user.id].product_list[int(commandList[2])].supplements[int(commandList[4])]
                    elif commandList[3] == 'clean':
                        users_online[call.from_user.id].product_list[int(commandList[2])].clean()
                    


                    for index_sup in range(len(users_online[call.from_user.id].product_list[int(commandList[2])].supplements)):
                        if users_online[call.from_user.id].product_list[int(commandList[2])].supplements[index_sup].price_tag == 0:
                            inlineKeyboard.add(types.InlineKeyboardButton(text='ü™®' + users_online[call.from_user.id].product_list[int(commandList[2])].supplements[index_sup].name +
                                                                           ' | +' + str(users_online[call.from_user.id].product_list[int(commandList[2])].supplements[index_sup].price_tag) +
                                                                            '‚ÇΩ', callback_data= 'open$sup$removeexc$'))
                        else:
                            inlineKeyboard.add(types.InlineKeyboardButton(text=users_online[call.from_user.id].product_list[int(commandList[2])].supplements[index_sup].name +
                                                                           ' | +' + str(users_online[call.from_user.id].product_list[int(commandList[2])].supplements[index_sup].price_tag) +
                                                                            '‚ÇΩ', callback_data= 'open$sup$' + commandList[2] + '$remove$'+str(index_sup)))
                    inlineKeyboard.add( types.InlineKeyboardButton(text='–¥–æ–±–∞–≤–∏—Ç—å', callback_data = 'open$sup$' + commandList[2] + '$addmenu'))
                    inlineKeyboard.add( types.InlineKeyboardButton(text='—É–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ–±–∞–≤–∫–∏', callback_data = 'open$sup$' + commandList[2] + '$clean'))
                    inlineKeyboard.add( types.InlineKeyboardButton(text='üõí –≤–µ—Ä–Ω—É—Ç—å—Å—è üõí', callback_data = 'open$cart$red$' + commandList[2]))
                    inlineKeyboard.add( types.InlineKeyboardButton(text='üóí –º–µ–Ω—é üóí', callback_data = 'open$menu'))
                    await call.message.answer("–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–æ–∫ –∫ –Ω–∞–ø–∏—Ç–∫—É:", reply_markup=inlineKeyboard)
            

            elif commandList[1] == 'cart':
                if commandList[2] == 'add':
                    if commandList[-2] == 'sup':
                        users_online[call.from_user.id].add(commandList[3:-2])
                        users_online[call.from_user.id].product_list[-1].supplements.append(supplements[int(commandList[-1])])
                        users_online[call.from_user.id].product_list[-1].supplements[-1].price_tag = 0
                    else:
                        users_online[call.from_user.id].add(commandList[3:])
                    inlineKeyboard.add( types.InlineKeyboardButton( text = 'üõí –ö–æ—Ä–∑–∏–Ω–∞ üõí', callback_data = 'open$cart$show') )
                    inlineKeyboard.add( types.InlineKeyboardButton(text='üóí –º–µ–Ω—é üóí', callback_data = 'open$menu'))
                    await call.message.answer('–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ –≤ –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É.' , reply_markup=inlineKeyboard)

                elif commandList[2] == 'show':
                    if len(commandList) == 5:
                        if commandList[3] =='del':
                            del users_online[call.from_user.id].product_list[int(commandList[4])] 
                    item_number = 0
                    for item in users_online[call.from_user.id].product_list:
                        print(item)
                        inlineKeyboard.add( types.InlineKeyboardButton( text = item.name + ' | ' + str(item.get_price()), callback_data = 'open$cart$red$' + str(item_number)) )
                        item_number +=1
                    
                    inlineKeyboard.add( types.InlineKeyboardButton( '–í—Å–µ–≥–æ | ' + str (users_online[call.from_user.id].get_price()), callback_data= 'open$preend') )
                    inlineKeyboard.add( types.InlineKeyboardButton(text='-----------------------------', callback_data= 'none') )
                    if len(users_online[call.from_user.id].comment) == 0:
                        inlineKeyboard.add( types.InlineKeyboardButton(text='‚úèÔ∏è –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É  ‚úèÔ∏è', callback_data = 'open$addcomment'))
                    else:
                        inlineKeyboard.add( types.InlineKeyboardButton(text='–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', callback_data = 'open$addcomment'))
                        inlineKeyboard.add( types.InlineKeyboardButton(text='"' + users_online[call.from_user.id].comment + '"', callback_data = 'open$addcomment'))
                    inlineKeyboard.add( types.InlineKeyboardButton(text='üóí –º–µ–Ω—é üóí', callback_data = 'open$menu'))
                    await call.message.answer('üõí        –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:        üõí', reply_markup=inlineKeyboard)

                elif commandList[2] == 'red':
                         
                    if users_online[call.from_user.id].product_list[int(commandList[3])].name in acceptable_drinks_for_supplements:
                        inlineKeyboard.add( types.InlineKeyboardButton(text='üß¥ –¥–æ–±–∞–≤–∫–∏ üß¥', callback_data = 'open$sup$' + commandList[3] + '$red'))
                    inlineKeyboard.add( types.InlineKeyboardButton(text='üóëÔ∏è —É–±—Ä–∞—Ç—å üóëÔ∏è', callback_data = 'open$cart$show$del$' + commandList[3]))
                    inlineKeyboard.add( types.InlineKeyboardButton(text='üõí –≤–µ—Ä–Ω—É—Ç—å—Å—è üõí', callback_data = 'open$cart$show'))
                    await call.message.answer(users_online[call.from_user.id].product_list[int(commandList[3])].name, reply_markup=inlineKeyboard)

            elif commandList[1] == 'preend':
                inlineKeyboard.add( types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='open$cart$show'))
                inlineKeyboard.add( types.InlineKeyboardButton(text='–í –∑–∞–ª–µ', callback_data='open$pay_order$in_cafe'))
                inlineKeyboard.add( types.InlineKeyboardButton(text='–° —Å–æ–±–æ–π', callback_data='open$pay_order$with_myself'))
                if users_online[call.from_user.id].get_price() < 750:
                    inlineKeyboard.add( types.InlineKeyboardButton(text='–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', callback_data='open$dlvr$break'))
                else:
                    inlineKeyboard.add( types.InlineKeyboardButton(text='–î–æ—Å—Ç–∞–≤–∫–∞', callback_data='open$dlvr$start'))
                await call.message.answer('–ö–∞–∫ –≤–∞–º —Ö–æ—á–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑? \n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –æ–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–ª—å–∑—è.', reply_markup=inlineKeyboard)
            
            elif commandList[1] == 'pay_order':
                users_online[call.from_user.id].close()
                orderInlineKeyboard.add(types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å', callback_data= 'order$'+str(call.from_user.id)+'$cook$start'))
                orderInlineKeyboard.add(types.InlineKeyboardButton(text='–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data= 'order$'+str(call.from_user.id)+'$waiver$write'))
                if commandList[2] == 'in_cafe':
                    users_online[call.from_user.id].set_address('"–í –∑–∞–ª–µ"')
                elif commandList[2] == 'with_myself':
                    users_online[call.from_user.id].set_address('"–° —Å–æ–±–æ–π"')
                elif commandList[2] == 'dlvr_close':
                    ...
                await call.message.answer("–ú—ã –±—É–¥–µ–º —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –Ω–∞ –∫–∞–∫–æ–π —Å—Ç–∞–¥–∏–∏ –≤–∞—à –∑–∞–∫–∞–∑.\n–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: ‚Ññ" + users_online[call.from_user.id].number)
                await call.message.answer("–ü–æ–∫–∞ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–º " + str(users_online[call.from_user.id].get_price()) + "‚ÇΩ —Å—é–¥–∞: \n" + pay_contacts)
                await bot.send_message(outchat_id, users_online[call.from_user.id].out(), reply_markup=orderInlineKeyboard)       

            elif commandList[1] == 'dlvr':
                if commandList[2] == 'start':
                    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")
                    users_online[call.from_user.id].delivery_trigger = True
                elif commandList[2] == 'break':
                    await call.message.answer("–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã –±–æ–ª–µ–µ 750‚ÇΩ")

            elif commandList[1] == 'addcomment':
                await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è:")
                users_online[call.from_user.id].comment_trigger = True

        elif commandList[0] == 'start':
            users_online[call.from_user.id] = Order(call.from_user.id)
            inlineKeyboard.add(types.InlineKeyboardButton(text='üóí –ú–µ–Ω—é üóí', callback_data='open$menu')) # -–∫–Ω–æ–ø–∫–∞ —Å –≤—ã–∑–æ–≤–æ–º –∫–æ—Ä–Ω–µ–≤–æ–π –≤–µ—Ä—à–∏–Ω—ã –¥–µ—Ä–µ–≤–∞-–º–µ–Ω—é
            await call.message.answer("–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –æ—Ç –∫–∞—Ñ–µ –†–∞—Å—Å–≤–µ—Ç!\n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º... ", reply_markup=inlineKeyboard)

        elif commandList[0] == 'none':
            ...    


    except exceptions.ButtonDataInvalid:
        print('CritError: Command List drop out of limit 64 byte memory.')
        await bot.send_message(outchat_id, 'CommandList drop out of limit of 64 byte memory. Some buttons break a work and can critical go out a telegram-bot . Telegram-bot was stop take orders.')
    except MemoryError:
            trash_collector_memory = trash_collector(extra_deadline)
            if len(trash_collector_memory) > 0:
                inlineKeyboard.add(types.InlineKeyboardButton(text= '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='open$menu'))
            for order in trash_collector:
                await bot.send_message(order, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å—Ç—ë—Ä—Ç—ã –∏–∑-–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.', reply_markup=inlineKeyboard)
    except KeyError:
        inlineKeyboard.add( types.InlineKeyboardButton(text='üóí–º–µ–Ω—éüóí', callback_data='open$menu'))
        users_online[call.from_user.id] = Order(call.from_user.id)
        await call.message.answer("–°–≤–µ–¥–µ–Ω–∏—è –æ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤. –ú—ã –æ—Ç–∫—Ä—ã–ª–∏ –¥–ª—è –≤–∞—Å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.", reply_markup=inlineKeyboard)
        
    except AttributeError:    
        await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ö–∞—Ñ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –Ω–µ–ª—å–∑—è. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å, –¥–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞.", reply_markup=inlineKeyboard)


@dp.message_handler(lambda message:True)             #–ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –∞–¥—Ä–µ—Å–∞
async def send_welcome(message: types.Message):   
    inlineKeyboard = types.InlineKeyboardMarkup()

    if users_online[message.from_user.id].delivery_trigger == True:
        users_online[message.from_user.id].set_address(message.text)
        inlineKeyboard.add( types.InlineKeyboardButton(text='–ê–¥—Ä–µ—Å —Ç–æ—á–Ω—ã–π', callback_data='open$pay_order$dlvr_close'))
        inlineKeyboard.add( types.InlineKeyboardButton(text='–•–æ—á—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ', callback_data='open$cart$show'))
        await message.answer('–£–±–µ–¥–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –≤–µ—Ä–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞. –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.', reply_markup=inlineKeyboard)    
    if users_online[message.from_user.id].comment_trigger == True:
        users_online[message.from_user.id].set_comment(message.text)
        inlineKeyboard.add( types.InlineKeyboardButton(text='üóí –ú–µ–Ω—é üóí', callback_data='open$menu'))
        inlineKeyboard.add( types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ', callback_data='open$cart$show'))
        await message.answer('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n" - '+ message.text +'"\n –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ –∑–∞–∫–∞–∑—É.', reply_markup=inlineKeyboard)   
                
                        
                


                    
                     
                

                    

    


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)